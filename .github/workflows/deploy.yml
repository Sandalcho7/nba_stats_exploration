name: Deploy to Azure ACI

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Log in to Azure CLI
    - name: Log in to Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 3: Log in to Azure Container Registry (ACR)
    - name: Log in to Azure Container Registry
      run: |
        az acr login --name ${{ secrets.ACR_NAME }}

    # Step 4: Build and push Docker images
    - name: Build and push Docker images
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest ./api-server
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/postgres:14 ./postgres
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/postgres:14
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/grafana:latest ./grafana
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/grafana:latest
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/prometheus:latest ./prometheus
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/prometheus:latest
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/alertmanager:v0.27.0 ./alertmanager
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/alertmanager:v0.27.0

    # Step 5: Deploy API server to ACI
    - name: Deploy API server
      run: |
        az container create \
          --resource-group anatole-RG \
          --name api-server \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest \
          --cpu 1 --memory 2 \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --environment-variables POSTGRES_HOST=postgres POSTGRES_DB=${{ secrets.POSTGRES_DB }} POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --ports 8080

    # Step 6: Deploy Postgres to ACI
    - name: Deploy Postgres
      run: |
        az container create \
          --resource-group anatole-RG \
          --name postgres \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/postgres:14 \
          --cpu 1 --memory 2 \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --ports 5432 \
          --environment-variables POSTGRES_DB=${{ secrets.POSTGRES_DB }} POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

    # Step 7: Deploy Grafana to ACI
    - name: Deploy Grafana
      run: |
        az container create \
          --resource-group anatole-RG \
          --name grafana \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/grafana:latest \
          --cpu 1 --memory 2 \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --ports 3000 \
          --environment-variables GF_PATHS_PROVISIONING=/etc/grafana/provisioning GF_AUTH_ANONYMOUS_ENABLED=true GF_AUTH_ANONYMOUS_ORG_ROLE=Admin GF_UNIFIED_ALERTING_ENABLED=true GF_ALERTING_ENABLED=false

    # Step 8: Retrieve FQDNs for all services
    - name: Retrieve FQDNs
      id: fqdn
      run: |
        echo "LOKI_FQDN=$(az container show --resource-group anatole-RG --name loki --query "ipAddress.fqdn" -o tsv)" >> $GITHUB_ENV
        echo "PROMETHEUS_FQDN=$(az container show --resource-group anatole-RG --name prometheus --query "ipAddress.fqdn" -o tsv)" >> $GITHUB_ENV
        echo "ALERTMANAGER_FQDN=$(az container show --resource-group anatole-RG --name alertmanager --query "ipAddress.fqdn" -o tsv)" >> $GITHUB_ENV
        echo "API_SERVER_FQDN=$(az container show --resource-group anatole-RG --name api-server --query "ipAddress.fqdn" -o tsv)" >> $GITHUB_ENV
        echo "GRAFANA_FQDN=$(az container show --resource-group anatole-RG --name grafana --query "ipAddress.fqdn" -o tsv)" >> $GITHUB_ENV

    # Step 9: Replace placeholders in config files
    - name: Update Alertmanager and Prometheus config files
      run: |
        sed -i "s|\${API_SERVER_FQDN}|${{ env.API_SERVER_FQDN }}|g" alertmanager/config.yml
        sed -i "s|\${API_SERVER_FQDN}|${{ env.API_SERVER_FQDN }}|g" prometheus/prometheus.yml
        sed -i "s|\${LOKI_FQDN}|${{ env.LOKI_FQDN }}|g" prometheus/prometheus.yml
        sed -i "s|\${GRAFANA_FQDN}|${{ env.GRAFANA_FQDN }}|g" prometheus/prometheus.yml
        sed -i "s|\${ALERTMANAGER_FQDN}|${{ env.ALERTMANAGER_FQDN }}|g" prometheus/prometheus.yml

    # Step 10: Deploy Alertmanager to ACI
    - name: Deploy Alertmanager
      run: |
        az container create \
          --resource-group anatole-RG \
          --name alertmanager \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/alertmanager:v0.27.0 \
          --cpu 1 --memory 2 \
          --ports 9093 \
          --files alertmanager/config.yml:/etc/alertmanager/config.yml \
          --command-line "--config.file=/etc/alertmanager/config.yml --storage.path=/alertmanager"

    # Step 11: Deploy Prometheus to ACI
    - name: Deploy Prometheus
      run: |
        az container create \
          --resource-group anatole-RG \
          --name prometheus \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/prometheus:latest \
          --cpu 1 --memory 2 \
          --ports 9090 \
          --files prometheus/prometheus.yml:/etc/prometheus/prometheus.yml \
          --command-line "--config.file=/etc/prometheus/prometheus.yml"