name: Build and Deploy to Azure

on:
  push:
    branches:
      - main  # Trigger on push to the main branch (or whichever branch you want)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 1: Log in to Azure using the service principal
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}  # Use the AZURE_CREDENTIALS secret

    # Step 2: Install Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verify that it's installed

    # Step 3: Log in to Azure Container Registry (ACR)
    - name: Log in to ACR
      run: |
        echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

    # Step 4: Build Docker image for api-server from Dockerfile
    - name: Build Docker image for api-server
      run: |
        docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest .  # Build from the Dockerfile in the current directory

    # Step 5: Tag Docker images for ACR (if needed for other services)
    - name: Tag Docker images
      run: |
        docker tag ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest
        docker tag grafana/grafana:latest ${{ secrets.ACR_LOGIN_SERVER }}/grafana:latest
        docker tag grafana/loki:2.9.2 ${{ secrets.ACR_LOGIN_SERVER }}/loki:2.9.2
        docker tag prom/prometheus:latest ${{ secrets.ACR_LOGIN_SERVER }}/prometheus:latest
        docker tag prom/alertmanager:v0.27.0 ${{ secrets.ACR_LOGIN_SERVER }}/alertmanager:v0.27.0
        docker tag appnba.azurecr.io/postgres:14 ${{ secrets.ACR_LOGIN_SERVER }}/postgres:14
        docker tag appnba.azurecr.io/demo-postgres:14 ${{ secrets.ACR_LOGIN_SERVER }}/demo-postgres:14

    # Step 6: Push Docker images to ACR
    - name: Push Docker images to ACR
      run: |
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/postgres:14
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/demo-postgres:14
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/grafana:latest
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/loki:2.9.2
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/prometheus:latest
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/alertmanager:v0.27.0

    # Step 7: Deploy api-server container to Azure Container Instances (ACI)
    - name: Deploy api-server container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name api-server \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/api-server:latest \
          --cpu 1 --memory 2 \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --environment-variables POSTGRES_HOST=postgres POSTGRES_DB=${{ secrets.POSTGRES_DB }} POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --ports 8080

    # Step 8: Deploy Postgres container to Azure Container Instances (ACI)
    - name: Deploy postgres container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name postgres \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/postgres:14 \
          --cpu 1 --memory 2 \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --environment-variables POSTGRES_DB=${{ secrets.POSTGRES_DB }} POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --ports 5432

    # Step 9: Deploy demo-postgres container to Azure Container Instances (ACI)
    - name: Deploy demo-postgres container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name demo-postgres \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/demo-postgres:14 \
          --cpu 1 --memory 2 \
          --registry-login-server ${{ secrets.ACR_LOGIN_SERVER }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --environment-variables POSTGRES_DB=${{ secrets.DEMO_POSTGRES_DB }} POSTGRES_USER=${{ secrets.DEMO_POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.DEMO_POSTGRES_PASSWORD }} \
          --ports 5432

    # Step 10: Deploy Grafana container to Azure Container Instances (ACI)
    - name: Deploy grafana container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name grafana \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/grafana:latest \
          --cpu 1 --memory 2 \
          --ports 3000 \
          --environment-variables GF_PATHS_PROVISIONING=/etc/grafana/provisioning GF_AUTH_ANONYMOUS_ENABLED=true GF_AUTH_ANONYMOUS_ORG_ROLE=Admin GF_UNIFIED_ALERTING_ENABLED=true GF_ALERTING_ENABLED=false

    # Step 11: Deploy Loki container to Azure Container Instances (ACI)
    - name: Deploy loki container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name loki \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/loki:2.9.2 \
          --cpu 1 --memory 2 \
          --ports 3100 \
          --command-line "-config.file=/etc/loki/local-config.yaml"

    # Step 12: Deploy Prometheus container to Azure Container Instances (ACI)
    - name: Deploy prometheus container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name prometheus \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/prometheus:latest \
          --cpu 1 --memory 2 \
          --ports 9090 \
          --command-line "--config.file=/etc/prometheus/prometheus.yml"

    # Step 13: Deploy Alertmanager container to Azure Container Instances (ACI)
    - name: Deploy alertmanager container to Azure Container Instances (ACI)
      run: |
        az container create \
          --resource-group anatole-RG \
          --name alertmanager \
          --image ${{ secrets.ACR_LOGIN_SERVER }}/alertmanager:v0.27.0 \
          --cpu 1 --memory 2 \
          --ports 9093 \
          --command-line "--config.file=/etc/alertmanager/config.yml --storage.path=/alertmanager"