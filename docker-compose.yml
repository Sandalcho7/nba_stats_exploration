name: Deploy to Azure

on:
  push:
    branches:
      - main  # Trigger deployment when code is pushed to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (needed for building images in a more advanced way)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Install Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # This will output the version to confirm it's installed

    # Step 4: Log in to Azure Container Registry (ACR)
    - name: Log in to Azure Container Registry
      run: |
        echo ${{ secrets.AZURE_REGISTRY_PASSWORD }} | docker login appnba.azurecr.io -u ${{ secrets.AZURE_REGISTRY_USERNAME }} --password-stdin

    # Step 5: Build Docker images using docker-compose
    - name: Build Docker images using Docker Compose
      run: |
        docker-compose -f docker-compose.yml build

    # Step 6: Push Docker images to Azure Container Registry
    - name: Push Docker images to Azure Container Registry
      run: |
        docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Install Azure CLI
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # Step 3: Log in to Azure using service principal
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Step 4: Deploy to Azure Container Instances (ACI)
    - name: Deploy to Azure Container Instances (ACI)
      run: |
        # Deploy api-server container
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name api-server \
          --image appnba.azurecr.io/api-server:latest \
          --cpu 1 --memory 2 \
          --registry-login-server appnba.azurecr.io \
          --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
          --ports 8080

        # Deploy postgres container (you can choose whether this should be an ACI or part of a more permanent solution)
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name postgres \
          --image appnba.azurecr.io/postgres:14 \
          --cpu 1 --memory 2 \
          --registry-login-server appnba.azurecr.io \
          --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
          --ports ${DEMO_POSTGRES_PORT}

        # Deploy demo-postgres container (optional)
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name demo-postgres \
          --image appnba.azurecr.io/demo-postgres:14 \
          --cpu 1 --memory 2 \
          --registry-login-server appnba.azurecr.io \
          --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }} \
          --ports ${DEMO_POSTGRES_PORT}

        # Optional: You can deploy other services like grafana, loki, prometheus as well.
        # This can be done using similar commands to the ones above.
        # Example for Grafana:
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name grafana \
          --image grafana/grafana:latest \
          --cpu 1 --memory 2 \
          --ports 3000 \
          --registry-login-server appnba.azurecr.io \
          --registry-username ${{ secrets.AZURE_REGISTRY_USERNAME }} \
          --registry-password ${{ secrets.AZURE_REGISTRY_PASSWORD }}